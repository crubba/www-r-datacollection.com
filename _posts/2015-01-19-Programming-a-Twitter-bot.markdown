---
layout: blog-layout
title: "Programming a Twitter bot â€“ and the rescue from procrastination"
author: "Simon Munzert"
authorref: "https://twitter.com/simonsaysnothin"
date: 2015-01-19 10:10:05
teaser-pic: "/img/blog/robot.jpg"
category: rstats
blogo: "main"
---

A considerable share of Twitter accounts is not actually run by humans. According to a [recent release by Twitter](http://qz.com/248063/twitter-admits-that-as-many-as-23-million-of-its-active-users-are-actually-bots/), `up to approximately 8.5%' of the active users are bots or third-party software that automatically aggregates tweets. Bots can follow other users, retweet content or post content on their own. What they say is essentially generated by scripts. 

Take [@TwoHeadlines](https://twitter.com/TwoHeadlines), for example. The bot, hosted by [Darius Kazemi](https://twitter.com/tinysubversions), scrapes headlines from Google News and replaces one of the nouns with another trending noun, which generates [hilarious](https://twitter.com/TwoHeadlines/status/549775865333436416) and sometimes [thought-provoking](https://twitter.com/TwoHeadlines/status/535609034062462976) tweets. Twitter bots can be more than just [gadgets for nerds](http://qz.com/279139/the-17-best-bots-on-twitter/): A notable example is the congress-edits bot [that tracks and posts modifications on Wikipedia](https://twitter.com/congressedits) which are made from IP addresses located inside the US Congress. It is fascinating to see how programmers use their creativity to repurpose Twitter's range and popularity.

If you are familiar with R, such projects are well within your reach. In this post, I give a little demonstration of how to program your own Twitter bot using R. The goal is to create a nerve-racking bot that reminds PhD students of their primary duty, that is to work on the dissertation. You can check out the results [here](https://twitter.com/phdwhipbot).

## Step 1: Create content for the bot's tweets.
The PhD whipping bot is inspired by [@indiewhipbot](https://twitter.com/INDIEWHIPBOT), an equally tedious contemporary who pushes indie game developers back to work by shouting orders and closing with a mild insult. For my bot, I start by setting up three little databases stored in XLS sheets. You can find all of them at the end of this post. The first stores (de-)motivating phrases:

```r
library(XLConnect)
shoutings <- readWorksheet(loadWorkbook( "phdwhipbot-shoutings.xlsx"), sheet=1, header=F, simplify=T)
shoutings[1:5]
```
```
## [1] "why aren't you working?"                                    
## [2] "i've got a phd in professional whipping. what have you got?"
## [3] "why are you checking Twitter again?"                        
## [4] "let me whip you back to your table."                        
## [5] "procrastinating again?" 
```

The second and third database contain a list of animal names that were scraped from [Wikipedia](http://en.wikipedia.org/wiki/Outline_of_zoology) and a short list of negative attributes:

```r
animals <- readWorksheet(loadWorkbook("phdwhipbot-animals.xlsx"),    sheet=1, header=F, simplify=T)
attribs <- readWorksheet(loadWorkbook("phdwhipbot-attributes.xlsx"), sheet=1, header=F, simplify=T)
sample(animals, 5)
```
```
## [1] "Ostrich" "Ape"     "Pelican" "Dove"    "Okapi" 
```
```r
sample(attribs, 5)
```
```
[1] "gullible"    "aloof"       "impatient"   "quarrelsome" "finicky"    
```

I use them to add some random mockery to the bot's shoutings. Pasting it together into one random tweet (everything in capital letters for an extra pinch of annoyance) works as follows:

```r
library(stringr)
toupper(str_c(sample(shoutings, 1), " ", sample(attributs, 1), " ", sample(animals, 1), "."))
```
```
## [1] "THE THESIS DOESN'T WRITE ITSELF. FUSSY ORYX."
```

Motivating, indeed. 


## Step 2: Get connected to Twitter.

In order to tweet these random whiplashes using R, we first register a new app on [apps.twitter.com](http://apps.twitter.com) for OAuth credentials, which we then use to log onto our Twitter account with R using the *twitteR* package. We have elaborated on this procedure in more detail [in a previous post](http://www.r-datacollection.com/blog/How-to-conduct-a-tombola-with-R/). In short, we load the *twitteR* package and connect to Twitter's REST API via OAuth, using credentials previously stored in the environment, that is the `.Renviron` file stored in your home directory which you can locate by entering `normalizePath("~/")` in the console:

```r
devtools::install_github("geoffjentry/twitteR")
library(twitteR)
api_key             <- Sys.getenv("twitter_api_key")
api_secret          <- Sys.getenv("twitter_api_secret")
access_token        <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
```

Now, we can let the bot tweet a random entry with the `tweet()` function:

```r
tweettxt <- toupper(str_c( sample(shoutings, 1), " ", 
                           sample(attributs, 1), " ", 
                           sample(animals,   1), "."     ))
tweet(tweettxt)
```
```
## [1] phdwhipbot: "SLACKING OFF AGAIN? NARROW-MINDED CHINCHILLA."
```


## Step 3: Let your bot tweet on a regular basis.

Naturally, it would be cumbersome if we had to operate the bot manually. Fortunately, there are means to execute an R script on a regular basis without manual input. As I happen to use a Windows machine as running server, I demonstrate how to schedule R tasks in Windows. We illustrate how to do this on a Linux/Mac OS machine [in our book](http://www.r-datacollection.com/).

On Windows platforms, the Windows Task Scheduler is the native tool for scheduling tasks. You'll find the Scheduler (on Windows 8) by right-clicking on Start > Computer Management > Task Scheduler. To set up a new task, click on *Create Task*. We are presented with a window with five tabs &ndash; General, Triggers, Actions, Conditions, and Settings. Under General we can provide a name for the task. Here I insert *R PhD Whipping Bot* for a descriptive title. In the field Triggers, we can add several triggers for starting the task. There are schedule triggers which start the task every day, week, or month and also triggers that refer to events like the startup of the computer or when it is in idle mode, and many more. After having set an execution interval, we should make sure that the start date and time of our task is placed in the future when we are done specifying the schedule. 

Next, we have to tell the Scheduler what to execute at the specified time. This is defined in the Actions tab. We choose *Start a program* for action and use the browse button to select the destination of *Rscript.exe*, which should be placed under, e.g., `C:\Program Files\R\R-3.1.2\bin\x64\`. Next, we add `phdwhipbot.r` in the *Add arguments* field and type in the directory where the script is placed in the *Start in* field. 

If you want to log all bot tweets in one common file, you can do so by adding the following to the script:

```r
line <- paste(as.character(Sys.time()), tweettxt, sep="\t")
write(line, file="tweets.log", append=TRUE)
```

Done! I hope this little bot helps you to stay on track. You can find the full R script as well as the related data [here](http://www.r-datacollection.com/blog/phdwhipbot.zip).

P.S.: I recently discovered the [Bot Weekly](http://tinyletter.com/bot-weekly) newsletter, a wonderful entry point into bot-land.

P.P.S.: If you've created your own Twitter bot with R, I'd love to hear about it! Feel free to [share them with me](https://twitter.com/simonsaysnothin). Or [me](https://twitter.com/phdwhipbot). COWARDLY ELK. 
